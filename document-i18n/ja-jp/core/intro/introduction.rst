はじめに
------------

WebAssembly（省略形は Wasm [#wasm]_ ）とは、効率の高い実行とコンパクトな表現形式を兼ね備えた設計の「安全」かつ「移植可能」な「低レベルコードフォーマット」です。
WebAssemblyの主な目的は、Webで高パフォーマンスなアプリケーションを利用可能にすることですが、Webに特化した前提はおいておらず、Web固有の機能を提供することを目的にしていないので、Web以外の環境でも利用できます。

WebAssemblyは、「W3C Community Group <https://www.w3.org/community/webassembly/>_ 」によって開発されたオープンな標準です。

本ドキュメントでは、:ref:`core <scope>` WebAssembly標準のバージョン |release| について記載します。記載内容は、今後の追加機能による新しい差分リリースによって上書きされることを意図しています。

.. _goals:

設計上の目的
~~~~~~~~~~~~

.. index:: design goals, portability

WebAssemblyの設計上の目的は以下のとおりです。

* 高速、安全、移植可能な「セマンティクス（意味論）」:

  * **高速性**: ネイティブコードに迫る実行パフォーマンス、現代的なあらゆるハードウェアに共通する機能の利用。

  * **安全性**: コードは検証され、メモリー安全 [#memorysafe]_ かつサンドボックス化された環境で実行されることで、データの汚損やセキュリティ侵害を防ぐ。

  * **十分な定義**: 有効なプログラムとその振る舞いを、形式的にも非形式的にも理解しやすい形で完全かつ正確に定義する。

  * **ハードウェア非依存**: 「デスクトップ」「モバイルデバイス」「埋め込みシステム」など、あらゆるモダンアーキテクチャ上でコンパイル可能。

  * **言語非依存**: いかなる「特定言語」「プログラミングモデル」「オブジェクトモデル」をも優遇しない。

  * **プラットフォーム非依存**: ブラウザでの埋め込み、スタンドアロンVMでの実行、他の環境への統合が可能。

  * **オープン性**: プログラムはシンプルかつ統一的な形で環境とやりとり可能。

* 高効率かつ移植可能な「表現形式」:

  * **コンパクト性**: 典型的なテキストコード形式やネイティブコード形式よりもサイズが小さく、高速に転送できるバイナリ形式を持つ。

  * **モジュラー性**: プログラムをより小さな部品に分割して、個別に転送/キャッシュ/消費可能。

  * **高効率性**: 「デコード」「検証」「コンパイル」を、JIT（just-in-time）コンパイルやAOT（ahead-of-time）コンパイルに匹敵する高速なシングルパスで実行可能。

  * **ストリーミング可能性**: 「デコード」「検証」「コンパイルを、データがすべて揃う前にできるだけ早期に開始する。

  * **パラレル化可能性**: 「デコード」「検証」「コンパイルを独立したパラレルなタスクに分割可能。

  * **移植性**: モダンなハードウェアで広くサポートされていないアーキテクチャを前提としない。

WebAssemblyコードは、特にWebブラウザのような環境における調査やデバッグの容易さも視野に入れていますが、こうした機能については本仕様書の範囲を超えています。

.. [#wasm] あくまで「WebAssembly」の短縮形であり、略語ではないので、すべてを大文字にはしません。

.. [#memorysafe] いかなるプログラムもWebAssemblyのメモリーモデルを破壊できません。これはもちろん、安全でない言語をWebAssemblyにコンパイルしたときにメモリレイアウト（WebAssembly線形メモリーの内部）が損壊しないことを保証するものではありません。

.. _scope:

WebAssemblyの応用範囲
~~~~~

WebAssemblyのコア部分は「仮想ISA（instruction set architecture）」です。こうすることでWebAssemblyは多くのユースケースを持ち、さまざまな環境への埋め込みが可能になっています。WebAssemblyの仕様は、多様性を維持しつつ再利用性を最大限に高めるために複数のドキュメントに分割・階層化されています。

本ドキュメントはWebAssemblyのコアISAレイヤに関連します。
ここでは「インストラクションセット」「バイナリエンコーディング」「検証（validation）」「実行」のセマンティクスとテキスト形式表現を定義しています。
ただし、WebAssemblyプログラムが、それが実行される特定の環境とどのようにやりとりするか、およびそのような環境からどのように呼び出されるかについては定義しません。

その代わり本仕様書は、Webなどの特定埋め込み環境へのインターフェイスを定義する追加ドキュメントによって補完されます。
それぞれの追加ドキュメントでは、特定の環境にふさわしいWebAssemblyのAPI（application program interface）を定義します。

.. index:: ! security, host, embedder,  module, function, import
.. _security:

セキュリティ上の考慮点
~~~~~~~~~~~~~~~~~~~~~~~

WebAssemblyは、コードが実行されるコンピューティング環境へのアンビエントアクセスを一切提供しません。（I/O、リソースへのアクセス、OSコールなど）環境に対するあらゆるやりとりは、:ref:`エンベダー <embedder>` が提供しWebAssembly :ref:`モジュール <module>` にインポートされた :ref:`関数 <function>` の呼び出しによってのみ実行可能です。
エンベダーでは、インポートで利用可能にする機能を制御または制限することで、それぞれの環境に適したセキュリティポリシーを確立できます。
こうした考慮点はエンベダー側に責務があり、特定環境を対象とする :ref:`API定義 <scope>` の主題となります。

WebAssemblyはホストのハードウェア上で直接動作するマシンコードに変換するよう設計されているので、潜在的にはハードウェアレベルのサイドチャネル攻撃に対して脆弱になる可能性があります。
この点が心配される環境では、WebAssembly計算（computation）を隔離するためにエンベダーが適切な緩和を行わなければならない場合もありえます。


.. index:: IEEE 754, floating point, Unicode, name, text format, UTF-8, character
.. _dependencies:

WebAssemblyが依存する標準
~~~~~~~~~~~~

WebAssemblyは以下の既存標準に依存しています。

* |IEEE754|_: :ref:`浮動小数点データ <syntax-float>` と、それぞれの :ref:`数値操作 <float-ops>` のセマンティクス。

* |Unicode|_: :ref:`名前 <syntax-name>` のインポートやエクスポート、:ref:`テキストフォーマット <text>`。


ただしこの仕様自身を自己完結させるために、上述した標準における関連の側面については、本仕様書の一部において定義および形式化されます。これには浮動小数点の :ref:`バイナリ表現 <aux-fbits>` や :ref:`丸め <aux-ieee>`、Unicode文字の :ref:`値の範囲 <syntax-char>` や :ref:`UTF-8エンコーディング <binary-utf8>` なども含まれます。

.. note::
   上述の標準は、あらゆる個別の定義について権威を持つ情報源です。
   本仕様書で与えられる形式化は、それらの定義に合致することを意図しています。
   本仕様書で記述される構文やセマンティクスがそのような情報源と乖離している場合はエラーとみなされます。
